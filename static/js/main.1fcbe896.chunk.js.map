{"version":3,"sources":["sketches/sketch.js","App.js","reportWebVitals.js","index.js"],"names":["sketch","p5","user","props","windowWidth","windowHeight","colors","split","map","a","marimos","numOfMarimos","nutritions","numOfNutritions","myCustomRedrawAccordingToNewPropsHandler","theProps","setup","createCanvas","Math","floor","noStroke","i","push","Marimo","position","getRandomPosition","vector","constructor","Vector","random2D","diameter","int","random","color","length","Nutrition","User","draw","background","frameCount","forEach","m","update","chewing","chewingTimer","filter","n","eaten","dist","toSize","pixelWidth","sub","copy","add","createVector","setNumOfMarimos","params","this","matrix","generateMatrix","drawPixelCircle","mult","x","y","delta","setMag","maxVector","eatenable","dx","mouseX","dy","mouseY","filled","radius","sqrt","pow","distance","fatfilled","maxblocks","ceil","borderColor","lerpColor","color_1","color_2","color_3","color_4","color_5","translate","xp","yp","fill","rect","pop","App","useState","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fcbe896.chunk.js","sourcesContent":["\n// import { vert, frag } from './tab2';\n\nexport default function sketch(p5) {\n  const { windowWidth, windowHeight } = p5;\n  let colors = \"a2ca3d-81bc3f-5fad41-3e954b-2d8950-1c7c54-48af7e\".split(\"-\").map(a=>\"#\"+a);\n  let marimos = [], numOfMarimos = 10, nutritions = [], numOfNutritions = 5;\n  let user;\n  let bubbles = [], sounds = [];\n  const chewingTime = 300;\n  const userColor = '#219EBC';\n  // const nutritionColor = '#6B705C';\n  const nutritionColor = '#fff';\n  let props;\n  let pixelWidth = 6; \n\n  p5.myCustomRedrawAccordingToNewPropsHandler = (theProps) => {\n    props = theProps;\n    // if (props.rotation) {\n    //   rotation = (props.rotation * Math.PI) / 180;\n    // }\n  };\n\n  p5.setup = () => {\n    p5.createCanvas(windowWidth, windowHeight);\n    \n    numOfMarimos = Math.floor(windowWidth*windowHeight/90000);\n    numOfNutritions = Math.floor(windowWidth*windowHeight/90000);\n    p5.noStroke();\n    \n    marimos=[];\n    for(let i=0; i<numOfMarimos; i++){\n      marimos.push(new Marimo({\n        position: getRandomPosition(),\n        vector: p5.constructor.Vector.random2D(),\n        diameter: p5.int(p5.random(10, 24)) * pixelWidth,\n        color: colors[Math.floor(p5.random(colors.length))],\n      }));\n    }\n    \n    nutritions=[];\n    for(let i=0; i<numOfNutritions; i++){\n      nutritions.push(new Nutrition({\n        position: getRandomPosition(),\n      }))\n    }\n    \n    user = new User();\n  }\n\n  p5.draw = () => {\n    p5.background('#DEF0F7');\n    // p5.background('black');\n\n    if (p5.frameCount % 50 === 0) {\n      let position = getRandomPosition();\n      nutritions.push(new Nutrition({\n        position\n      }))\n    }\n    \n    // marimos...\n    marimos.forEach(m => {\n      m.update()\n      m.draw()\n      if(m.chewing) m.chewingTimer--;\n      if(m.chewingTimer<=0) {\n        m.chewing=false;\n        m.chewingTimer = chewingTime;\n      }\n      \n      // hit the nutritions\n      nutritions.filter(n => !n.eaten).forEach(n => {\n        if(m.position.dist(n.position)<(m.diameter+n.diameter)/2) {\n          // m.diameter+=pixelWidth;\n          m.toSize(m.diameter + pixelWidth);\n          n.eaten=true;\n        }\n      })\n      \n      // hit user\n      if(user.diameter>pixelWidth*3) {\n        if(!m.chewing && m.position.dist(user.position)<(m.diameter+user.diameter)/2) {\n          // m.diameter+=pixelWidth;\n          m.toSize(m.diameter + pixelWidth);\n          m.chewing = true;\n          // user.diameter-=pixelWidth;\n          user.toSize(user.diameter - pixelWidth);\n        }\n      } else {\n        // console.log(\"Game over!\")\n        // alert(\"Game Over!\");\n        // setup();\n      }\n      \n      // divide\n      if(m.diameter>pixelWidth*28) {\n        // sounds[0].play();\n        // m.diameter=pixelWidth*15;\n        m.toSize(pixelWidth*15);\n        m.position.sub(10, 0);\n        marimos.push(new Marimo({\n          position: m.position.copy().add(20, 0),\n          vector: p5.createVector(0, 0),\n          diameter: pixelWidth*15,\n          color: m.color,\n        }));\n      }\n      \n      // add bubbles\n      // if (p5.random()<0.02){\n      //   let offset = p5.random(-m.radius, m.radius);\n      //   bubbles.push({\n      //     p: m.position.copy().add(offset),\n      //     v: p5.createVector(0, p5.random(-0.5,-5)),\n      //     r: p5.random(1,6),\n      //     opacity: p5.random(0.1, 500)\n      //   })\n      // }\n    })\n    \n    // nutritions...\n    nutritions.filter(n => !n.eaten).forEach(n => {\n      n.draw()\n      \n      // hit user\n      if(user.position.dist(n.position)<(user.diameter+n.diameter)/2) {\n        user.toSize(user.diameter + pixelWidth);\n        n.eaten=true;\n      }\n    });\n    \n    // bubbles...\n    // bubbles.forEach(b=>{\n    //   drawPixelCircle(p5.color(255), p5.createVector(b.p.x + p5.noise(b.p.y/20)*b.r*2, b.p.y, 100), b.r);\n    //     b.p.y+=b.v.y;\n    // })\n    // bubbles = bubbles.filter(b=>b.p.y>-windowHeight/2)\n    \n    user.update();\n    user.draw();\n\n    props.setNumOfMarimos(marimos.length)\n  }\n\n  class Marimo {\n    constructor(params) {\n      this.position = params.position;\n      this.vector = params.vector;\n      this.diameter = params.diameter;\n      this.color = params.color;\n      this.chewing = false;\n      this.chewingTimer = chewingTime;\n      // this.colliding=false;\n\n      this.matrix = generateMatrix(this.color, this.diameter);\n    }\n    draw() {\n      drawPixelCircle(this.matrix, this.position);\n    }\n    update() {\n      this.position.add(this.vector)\n      if(p5.frameCount%900===0) this.vector.mult(0.9)\n      \n      // hit the wall\n      if(this.position.x <= 0 || this.position.x > windowWidth) this.vector.x = -1.3*this.vector.x;\n      if(this.position.y <= 0 || this.position.y > windowHeight) this.vector.y = -1.3*this.vector.y;\n      \n      // hit the marimos\n      marimos.forEach(m => {\n        if (this!==m){\n          if (this.position.dist(m.position)<(this.diameter+m.diameter)/2) {\n            //add sounds\n            // \n          }\n\n          if (this.position.dist(m.position)<(this.diameter+m.diameter)/2.1) {\n            let delta = m.position.copy().sub(this.position)\n            this.vector.sub(delta.mult(0.2).setMag(1))\n            m.vector.add(delta.mult(0.2).setMag(1))\n          }\n        }\n      })\n      \n      const maxVector = 2.4;\n      if(this.vector.x > maxVector) this.vector.x = maxVector;\n      if(this.vector.x < -1*maxVector) this.vector.x = -1*maxVector;\n      if(this.vector.y > maxVector) this.vector.y = maxVector;\n      if(this.vector.y < -1*maxVector) this.vector.y = -1*maxVector;\n    }\n    toSize(diameter) {\n      this.diameter=diameter;\n      this.matrix = generateMatrix(this.color, this.diameter);\n    }\n  }\n\n  class Nutrition {\n    constructor(params) {\n      this.position = params.position;\n      this.diameter = 4;\n      this.color = nutritionColor;\n      this.eaten=false;\n\n      this.matrix = generateMatrix(this.color, this.diameter);\n    }\n    draw() {\n      drawPixelCircle(this.matrix, this.position);\n      // drawPixelCircle(nutritionColor, this.position, this.diameter);\n    }\n  }\n\n  class User {\n    constructor(params) {\n      this.position = p5.createVector(0, 0);\n      this.diameter = pixelWidth*3;\n      this.eatenable = true;\n      this.color = userColor;\n      \n      this.matrix = generateMatrix(this.color, this.diameter);\n    }\n    draw() {\n      // drawPixelCircle(userColor, this.position, this.diameter);\n      drawPixelCircle(this.matrix, this.position);\n    }\n    update() {\n      const easing = 0.01;\n      \n      let targetX = p5.mouseX;\n      let dx = targetX - this.position.x;\n      this.position.x += dx * easing;\n\n      let targetY = p5.mouseY;\n      let dy = targetY - this.position.y;\n      this.position.y += dy * easing;\n    }\n    toSize(diameter) {\n      this.diameter=diameter;\n      this.matrix = generateMatrix(this.color, this.diameter);\n    }\n  }\n\n  const getRandomPosition = () => p5.createVector(p5.random(0, windowWidth), p5.random(0, windowHeight));\n\n  const distance = ( x, y ) => Math.sqrt((Math.pow(y, 2)) + Math.pow(x, 2));\n  const filled = ( x, y, radius ) => distance(x, y) <= radius;\n\tconst\tfatfilled = ( x, y, radius ) => {\n    return filled(x, y, radius) && !(\n      filled(x + 1, y, radius) &&\n      filled(x - 1, y, radius) &&\n      filled(x, y + 1, radius) &&\n      filled(x, y - 1, radius) &&\n      filled(x + 1, y + 1, radius) &&\n      filled(x + 1, y - 1, radius) &&\n      filled(x - 1, y - 1, radius) &&\n      filled(x - 1, y + 1, radius)\n    );\n  };\n\n  const generateMatrix = (color, diameter) => {\n    const radius = Math.ceil(diameter/pixelWidth)/2;\n    const borderColor = p5.lerpColor(p5.color('black'), p5.color(color), 0.6);\n    const color_1 = p5.lerpColor(p5.color('black'), p5.color(color), 0.66);\n    const color_2 = p5.lerpColor(p5.color('black'), p5.color(color), 0.9);\n    const color_3 = color;\n    const color_4 = p5.lerpColor(p5.color('white'), p5.color(color), 0.9);\n    const color_5 = p5.lerpColor(p5.color('white'), p5.color(color), 0.8);\n    // const shadowColor = p5.lerpColor(p5.color('black'), p5.color(color), 0.8);\n    // const lightColor = p5.lerpColor(p5.color('white'), p5.color(color), 0.8);\n\n    let maxblocks;\n    if( (radius * 2) % 2 == 0 ) {\n      maxblocks = Math.ceil(radius - .5) * 2 + 1;\n    } else {\n      maxblocks = Math.ceil(radius) * 2;\n    }\n\n    let matrix = [];\n    // for( let y = -maxblocks / 2 + 1; y <= maxblocks / 2 - 1; y++ ) {\n    //   matrix[y] = [];\n    //   for( let x = -maxblocks / 2 + 1; x <= maxblocks / 2 - 1; x++ ) {\n    let i = 0, j = 0;\n    for( let y = -maxblocks / 2 + 1; y <= maxblocks / 2 - 1; y++ ) {\n      matrix[i] = [];\n      j=0;\n      for( let x = -maxblocks / 2 + 1; x <= maxblocks / 2 - 1; x++ ) {                \n        \n        // let pixelColor = false;\n        if(filled(x, y, radius)) {\n          if(fatfilled(x, y, radius) && !(fatfilled(x + (x > 0 ? 1 : -1), y, radius) && fatfilled(x, y + (y > 0 ? 1 : -1), radius))) {\n            // pixelColor = borderColor;\n            matrix[i].push(borderColor)\n          } else if(filled(x+2, y+2, 1 )) {\n            matrix[i].push(color_5);\n          } else if(filled(x+2, y+2, radius-7 )) {\n            p5.random()<0.3 ? matrix[i].push(color_5) : matrix[i].push(color_4);\n          } else if(filled(x+2, y+2, radius-6 )) {\n            // pixelColor = lightColor;\n            matrix[i].push(color_4)\n          } else if(filled(x+2, y+2, radius-4 )) {\n          // //   pixelColor = p5.random()<0.03 ? shadowColor : color;\n            p5.random()<0.3 ? matrix[i].push(color_4) : matrix[i].push(color_3);\n          } else if(filled(x+1, y+1, radius-3 )) {\n            // pixelColor = color;\n            matrix[i].push(color_3)\n          } else if(filled(x+1, y+1, radius-2 )) {\n            p5.random()<0.3 ? matrix[i].push(color_3) : matrix[i].push(color_2);\n          } else if(filled(x+1, y+1, radius-1 )) {\n            matrix[i].push(color_2)\n          } else {\n            // pixelColor = shadowColor;\n            matrix[i].push(color_1)\n          }\n        } else {\n          matrix[i].push(null)\n        }\n\n        // if(pixelColor) {\n        //   p5.fill(pixelColor);\n        //   p5.rect(xp, yp, pixelWidth);\n        // }\n        j++;\n      }\n      i++;\n    }\n    // console.log(matrix)\n    return matrix;\n  }\n\n  function drawPixelCircle(matrix, position) {\n    p5.push();\n      // p5.circle(position.x, position.y, diameter);\n      p5.translate(position.x, position.y);\n      \n      for( let y = 0; y < matrix.length; y++ ) {\n        for( let x = 0; x < matrix.length; x++ ) {\n          if(matrix[y][x]) {\n            const xp = (x - matrix.length/2)*pixelWidth;\n            const yp = (y - matrix.length/2)*pixelWidth;\n\n            p5.fill(matrix[y][x]);\n            p5.rect(xp, yp, pixelWidth);\n          }\n        }\n      }\n\n    p5.pop();\n  }\n}","import React, { useState } from \"react\";\n// import logo from './logo.svg';\nimport './App.css';\nimport P5Wrapper from \"react-p5-wrapper\";\nimport sketch from \"./sketches/sketch\";\n// import \"./example.css\";\n\nfunction App() {\n  // const [state, setState] = useState({ rotation: 160 });\n  const [numOfMarimos, setNumOfMarimos] = useState(0);\n\n  return (\n    <>\n      <div className=\"data-box\">\n        Number of Marimos: {numOfMarimos}\n      </div>  \n      <P5Wrapper\n        sketch={sketch} \n        setNumOfMarimos={setNumOfMarimos}\n        // rotation={state.rotation} \n      />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}